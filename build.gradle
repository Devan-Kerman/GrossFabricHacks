plugins {
    id "fabric-loom" version "0.9-SNAPSHOT"
    id "maven-publish"
//    id "maven"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {url = "https://auoeke.jfrog.io/artifactory/maven"}
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    compileOnly("com.google.code.findbugs:jsr305:+")
    compileOnly("org.jetbrains:annotations:+")

    testImplementation("org.junit.jupiter:junit-jupiter:+")

    // concern
    // extraLibs files("${System.getProperty('java.home')}/../lib/tools.jar")

    implementation(include("net.bytebuddy:byte-buddy-agent:+"))
//    implementation(include("net.java.dev.jna:jna:5.3.1"))
//    implementation(include("net.java.dev.jna:jna-platform:5.3.1"))

    modImplementation(include("user11681:dynamic-entry:+"))
    include(implementation("user11681:reflect:latest.integration"))
    include(implementation("net.gudenau.lib:unsafe:latest.integration"))
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")

    from(sourceSets.main.allSource)
}

jar {
    from("LICENSE")

    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Agent-Class": "net.devtech.grossfabrichacks.instrumentation.InstrumentationAgent",
                "Can-Retransform-Classes": "true"
        )
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
    // select the repositories you want to publish to
    repositories {
        File gh = new File(projectDir.parentFile.parentFile, "util/Devan-Repo")
        System.out.println(gh)
        if (gh.exists()) {
            maven {
                url = gh.absolutePath
            }
        }
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
